from supabase import create_client, Client
import os
import io
from datetime import date, datetime
import logging
import mimetypes
from flask_cors import CORS
from docx.oxml.shape import CT_Picture
from docx.oxml.shared import qn
import xml.etree.ElementTree as ET
from docx import Document
from docx.opc.constants import RELATIONSHIP_TYPE as RT

from io import BytesIO
import traceback
from docx.shape import InlineShape
from docx.oxml.ns import nsdecls
from docx.oxml import parse_xml, OxmlElement
from flask_wtf import FlaskForm
from wtforms import StringField, DateField, DecimalField, SelectField, SubmitField, PasswordField
from wtforms.validators import Optional, DataRequired
from flask import Flask, render_template, request, send_file, jsonify, send_from_directory, redirect, url_for, flash
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from urllib.parse import urlparse, urljoin
import base64
import json
from dotenv import load_dotenv

# Print current working directory and its contents
print("Current working directory:", os.getcwd())
print("Contents of current directory:", os.listdir())

# Attempt to load .env file
env_path = os.path.join(os.getcwd(), '.env')
print(f"Attempting to load .env file from: {env_path}")
load_dotenv(dotenv_path=env_path, verbose=True)

# Initialize Supabase client
supabase_url = os.getenv("SUPABASE_URL")
supabase_key = os.getenv("SUPABASE_ANON_KEY")

print("SUPABASE_URL:", supabase_url)
print("SUPABASE_ANON_KEY:", supabase_key)

if not supabase_url or not supabase_key:
    raise ValueError("SUPABASE_URL and SUPABASE_ANON_KEY must be set in the .env file")

supabase: Client = create_client(supabase_url, supabase_key)

# Get the directory of the current file (app.py)
basedir = os.path.abspath(os.path.dirname(__file__))

app = Flask(__name__, static_folder='static', static_url_path='/static')
app.config['SECRET_KEY'] = 'your_secret_key_here'
app.config['TEMPLATE_PATHS'] = {
    'exportador-comercializador': os.path.join(basedir, 'documents', 'PLANTILLA EXPORTADOR-COMERCIALIZADOR.docx'),
    'exportador-productor': os.path.join(basedir, 'documents', 'PLANTILLA EXPORTADOR - PRODUCTOR.docx')
}
logging.basicConfig(level=logging.DEBUG)

mimetypes.add_type('application/vnd.openxmlformats-officedocument.wordprocessingml.document', '.docx')

CORS(app)

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

def check_write_permissions(path):
    if os.access(path, os.W_OK):
        app.logger.info(f"Write permissions OK for {path}")
    else:
        app.logger.error(f"No write permissions for {path}")

class FormularioEnvio(FlaskForm):
    ruc_exportador = StringField('RUC', validators=[Optional()])
    razon_social_exportador = StringField('Razón Social', validators=[Optional()])
    domicilio_fiscal_exportador = StringField('Domicilio Fiscal', validators=[Optional()])
    locales_anexos_exportador = StringField('Locales Anexos', validators=[Optional()])
    departamento_productor = StringField('Departamento', validators=[Optional()])
    objeto_social_exportador = StringField('Objeto Social y Actividad Económica', validators=[Optional()])
    representante_legal_exportador = StringField('Representante Legal', validators=[Optional()])
    dni_exportador = StringField('DNI', validators=[Optional()])
    cargo_exportador = StringField('Cargo', validators=[Optional()])
    telefono_exportador = StringField('Teléfono', validators=[Optional()])
    origen_de_los_fondos_exportador = StringField('Origen de los Fondos', validators=[Optional()])
    cliente_empresa_exportador = StringField('Empresa Cliente', validators=[Optional()])
    destino_exportador = StringField('Destino', validators=[Optional()])
    peso_kg_exportador = DecimalField('Peso KG', validators=[Optional()])
    fecha_de_ingreso_exportador = DateField('Fecha de Ingreso', format='%Y-%m-%d', validators=[Optional()])
    guia_aerea_exportador = StringField('Guía Aérea', validators=[Optional()])
    aerolinea_exportador = StringField('Aerolínea', validators=[Optional()])
    invoice_origen_exportador = StringField('Invoice (Certificado de Origen)', validators=[Optional()])
    recpo_exportador = StringField('RECPO', validators=[Optional()])
    guia_de_remision_exportador = StringField('Guía de Remisión Exportador', validators=[Optional()])
    reinpo_exportador = StringField('REINFO', validators=[Optional()])
    ciudad_exportador = StringField('Ciudad', validators=[Optional()])
    fecharegistro_exportador = DateField('Fecha de Registro', format='%Y-%m-%d', validators=[Optional()])
    dore_exportador = StringField('DORE', validators=[Optional()])
    factura_productor = StringField('Factura N°', validators=[Optional()])
    fecha_factura_productor = DateField('Fecha Factura', format='%Y-%m-%d', validators=[Optional()])
    valor_fob_productor = DecimalField('Valor FOB', validators=[Optional()])
    peso_neto_productor = DecimalField('Peso Neto', validators=[Optional()])
    peso_bruto_productor = DecimalField('Peso Bruto', validators=[Optional()])
    tipo_producto_productor = StringField('Tipo de Producto', validators=[Optional()])
    barra_de_oro_dore_productor = StringField('Barra de Oro Doré con Ley Aprox', validators=[Optional()])
    peso_no_oro_productor = DecimalField('Peso no Oro', validators=[Optional()])
    guia_remision_productor = StringField('Guía de Remisión de Productor', validators=[Optional()])
    concesion_minera_productor = StringField('Concesión Minera Metálica', validators=[Optional()])
    direccion_concesion_productor = StringField('Dirección de la Concesión', validators=[Optional()])
    fecha_guia_remision_productor = DateField('Fecha Guía Remisión', format='%Y-%m-%d', validators=[Optional()])
    # Transporte (solo los campos de la imagen)
    ruc_transporte = StringField('RUC', validators=[Optional()])
    razon_social_transporte = StringField('Razón Social', validators=[Optional()])
    domicilio_fiscal_transporte = StringField('Domicilio Fiscal', validators=[Optional()])
    marca_transporte = StringField('Marca', validators=[Optional()])
    placa_transporte = StringField('Placa', validators=[Optional()])
    # Productor (solo los campos de la imagen para exportador-comercializador)
    ruc_productor = StringField('RUC', validators=[Optional()])
    razon_social_productor = StringField('Razón Social', validators=[Optional()])
    domicilio_fiscal_productor = StringField('Domicilio Fiscal', validators=[Optional()])
    dni_productor = StringField('DNI', validators=[Optional()])
    departamento_productor = StringField('Departamento', validators=[Optional()])
    factura_productor = StringField('Factura N°', validators=[Optional()])
    fecha_factura_productor = DateField('Fecha Factura', format='%Y-%m-%d', validators=[Optional()])
    valor_fob_productor = DecimalField('Valor FOB', validators=[Optional()])
    peso_bruto_productor = DecimalField('Peso Bruto', validators=[Optional()])
    guia_remision_productor = StringField('Guía de Remisión de Productor', validators=[Optional()])
    concesion_minera_productor = StringField('Concesión Minera Metálica', validators=[Optional()])
    codigo_ingemmet_n_productor = StringField('Código INGEMMET N° (Código Concesión Minera)', validators=[Optional()])
    fecha_registro_productor = DateField('Fecha Registro', format='%Y-%m-%d', validators=[Optional()])
    direccion_concesion_productor = StringField('Dirección de la Concesión', validators=[Optional()])
    reinpo_exportador = StringField('REINFO', validators=[Optional()])
    recpo_exportador = StringField('RECPO', validators=[Optional()])
    submit = SubmitField('Enviar')


class User(UserMixin):
    def __init__(self, username):
        self.username = username
    
    def get_id(self):
        return self.username

users = {'admin': {'password': generate_password_hash('password123', method='pbkdf2:sha256')}}

@login_manager.user_loader
def load_user(user_id):
    return User(user_id) if user_id in users else None

@app.route('/', methods=['GET'])
@login_required
def landing():
    return render_template('landing.html')

@app.route('/index', methods=['GET', 'POST'])
@login_required
def index():
    if request.method == 'POST':
        template_type = request.form.get('template_type', 'exportador-comercializador')
    else:
        template_type = request.args.get('template', 'exportador-comercializador')
    if template_type not in app.config['TEMPLATE_PATHS']:
        return redirect(url_for('landing'))
    
    app.logger.info(f"Index route accessed by user: {current_user.get_id()} with template: {template_type}")
    form = FormularioEnvio()
    
    if request.method == 'POST':
        if form.validate_on_submit():
            try:
                app.logger.info("Form validated on submit")
                doc = generar_documento(form, template_type)
                
                output = io.BytesIO()
                doc.save(output)
                output.seek(0)
                
                template_path = app.config['TEMPLATE_PATHS'][template_type]
                download_name = os.path.basename(template_path)
                return send_file(
                    output,
                    as_attachment=True,
                    download_name=download_name,
                    mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
                )
            except Exception as e:
                app.logger.error(f"Error in index route: {str(e)}")
                return jsonify({"error": str(e)}), 500
        else:
            return jsonify({"error": "Form validation failed", "details": form.errors}), 400
    
    return render_template('index.html', form=form, template_type=template_type)

@app.errorhandler(500)
def internal_server_error(e):
    return "Internal Server Error: " + str(e), 500

@app.errorhandler(Exception)
def handle_exception(e):
    app.logger.error(f"Unhandled exception: {str(e)}")
    return jsonify({"error": "An unexpected error occurred"}), 500

def generar_documento(form, template_type):
    try:
        template_path = app.config['TEMPLATE_PATHS'][template_type]
        app.logger.info(f"Using template: {template_path}")
        doc = Document(template_path)
        app.logger.info("Document loaded from template")
        
        if template_type == 'exportador-productor':
            replacements = {
                '[RAZON_SOCIAL_EXPORTADOR_DJCC]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_DJCC]': form.ruc_exportador.data,
                '[OBJETO_SOCIAL_DJCC]': form.objeto_social_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_DJCC1]': form.representante_legal_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_DJCC2]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_DJCC]': form.dni_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_DJCC]': form.domicilio_fiscal_exportador.data,
                '[TELEFONO_EXPORTADOR_DJCC]': form.telefono_exportador.data,
                '[ORIGEN_DE_LOS_FONDOS_EXPORTADOR_DJCC]': form.origen_de_los_fondos_exportador.data,
                '[FACTURA_PRODUCTOR_DJCC]': form.factura_productor.data,
                '[FECHA_FACTURA_PRODUCTOR_DJCC1]': form.fecha_factura_productor.data.strftime('%d/%m/%Y') if form.fecha_factura_productor.data else '',
                '[FACTURA_PRODUCTOR_RCP1]': form.factura_productor.data,
                '[RUC_PRODUCTOR_RCP1]': form.ruc_exportador.data,
                '[RAZON_SOCIAL_PRODUCTOR_RCP]': form.razon_social_exportador.data,
                '[VALOR_FOB_PRODUCTOR_RCP12]': str(form.valor_fob_productor.data),
                '[VALOR_FOB_PRODUCTOR_RCP2]': str(form.valor_fob_productor.data),
                '[GUIA_AEREA_EXPORTADOR_RCP1]': form.guia_aerea_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_RCP1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[REPRESENTANTE_LEGAL_EXPORTADOR_DJOM1]': form.representante_legal_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_DJOM1]': form.domicilio_fiscal_exportador.data,
                '[DNI_EXPORTADOR_DJOM1]': form.dni_exportador.data,
                '[CARGO_EXPORTADOR_DJOM]': form.cargo_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_DJOM1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_DJOM1]': form.ruc_exportador.data,
                '[REINFO_EXPORTADOR_DJOM]': form.reinpo_exportador.data,
                '[MINING_CODE_EXPORTADOR_DJOM1]': getattr(form, 'mining_code_exportador', None).data if hasattr(form, 'mining_code_exportador') else '',
                '[CIUDAD_EXPORTADOR_DJOM1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_DJOM1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[INVOICE_ORIGEN_EXPORTADOR_EEA1]': form.invoice_origen_exportador.data,
                '[GUIA_AEREA_EXPORTADOR_EEA1]': form.guia_aerea_exportador.data,
                '[DESTINO_EXPORTADOR_EEA1]': form.destino_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_DJT1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_DJT1]': form.dni_exportador.data,
                '[CARGO_EXPORTADOR_DJT1]': form.cargo_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_DJT1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_DJT1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_DJT1]': form.domicilio_fiscal_exportador.data,
                '[FACTURA_PRODUCTOR_DJT1]': form.factura_productor.data,
                '[FECHA_FACTURA_PRODUCTOR_DJT]': form.fecha_factura_productor.data.strftime('%d/%m/%Y') if form.fecha_factura_productor.data else '',
                '[RAZON_SOCIAL_TRANSPORTE_DJT1]': form.razon_social_transporte.data,
                '[PLACA_TRANSPORTE_DJT1]': form.placa_transporte.data,
                '[GUIA_DE_REMISIÓN_EXPORTADOR_DJT1]': form.guia_de_remision_exportador.data,
                '[FECHA_REGISTRO_PRODUCTOR_DJT]': form.fecha_registro_productor.data.strftime('%d/%m/%Y') if form.fecha_registro_productor.data else '',
                '[CIUDAD_EXPORTADOR_DJT1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_DJT1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[REPRESENTANTE_LEGAL_EXPORTADOR_RL1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_RL1]': form.dni_exportador.data,
                '[CARGO_EXPORTADOR_RL]': form.cargo_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_RL1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_RL1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_RL1]': form.domicilio_fiscal_exportador.data,
                '[GUIA_AEREA_EXPORTADOR_RL1]': form.guia_aerea_exportador.data,
                '[FACTURA_PRODUCTOR_RL1]': form.factura_productor.data,
                '[RAZON_SOCIAL_EXPORTADOR_RL2]': form.razon_social_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_RL3]': form.razon_social_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_RL4]': form.razon_social_exportador.data,
                '[CIUDAD_EXPORTADOR_RL1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_RL1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[RAZON_SOCIAL_EXPORTADOR_UI1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_UI1]': form.ruc_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_UI1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_UI1]': form.dni_exportador.data,
                '[CIUDAD_EXPORTADOR_UI1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_UI1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[GUIA_AEREA_EXPORTADOR_AC1]': form.guia_aerea_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_AC1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_AC1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_AC1]': form.domicilio_fiscal_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_AC1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_AC1]': form.dni_exportador.data,
                '[CIUDAD_EXPORTADOR_AC1]': form.ciudad_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_AC2]': form.razon_social_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_AC2]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[CIUDAD_EXPORTADOR_AC2]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_AC1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[GUIA_AEREA_EXPORTADOR_CO1]': form.guia_aerea_exportador.data,
                '[DORE_CO1]': form.dore_exportador.data,
                '[PESO_NETO_KG_EXPORTADOR_CO1]': str(form.peso_kg_exportador.data),
                '[DESTINO_CO1]': form.destino_exportador.data,
                '[FACTURA_PRODUCTOR_CO1]': form.invoice_origen_exportador.data,
                '[AEROLINEA_EXPORTADOR_CO1]': form.aerolinea_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_CO1]': form.razon_social_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_CO2]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_CO1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_CO1]': form.domicilio_fiscal_exportador.data,
                '[MINING_CODE_EXPORTADOR_CO1]': getattr(form, 'mining_code_exportador', None).data if hasattr(form, 'mining_code_exportador') else '',
                '[RAZON_SOCIAL_EXPORTADOR_SCO1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_SCO1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_SCO1]': form.domicilio_fiscal_exportador.data,
                '[CARGO_EXPORTADOR_SCO1]': form.cargo_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_SCO1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_SCO1]': form.dni_exportador.data,
                '[RAZON_SOCIAL_TRANSPORTE_SCO1]': form.razon_social_transporte.data,
                '[DOMICILIO_FISCAL_TRANSPORTE_SCO1]': form.domicilio_fiscal_transporte.data,
                '[RAZON_SOCIAL_TRANSPORTE_SCO2]': form.razon_social_transporte.data,
                '[RAZON_SOCIAL_EXPORTADOR_SCO3]': form.razon_social_exportador.data,
                '[RAZON_SOCIAL_TRANSPORTE_SCO3]': form.razon_social_transporte.data,
                '[CIUDAD_EXPORTADOR_SCO1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_SCO1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[FECHAREGISTRO_EXPORTADOR_UP1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[RAZON_SOCIAL_EXPORTADOR_UP1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_UP1]': form.ruc_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_UP1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_UP1]': form.dni_exportador.data,
                '[GUIA_REMISION_EXPORTADOR_UP2]': form.guia_de_remision_exportador.data,
                '[RAZON_SOCIAL_PRODUCTOR_UP1]': form.razon_social_productor.data,
                '[RUC_PRODUCTOR_UP1]': form.ruc_productor.data,
                '[GUIA_REMISION_PRODUCTOR_UP1]': form.guia_remision_productor.data,
                '[FACTURA_PRODUCTOR_UP1]': form.factura_productor.data,
                '[PESO_BARRA_PRODUCTOR_UP1]': str(form.peso_bruto_productor.data),
                '[CODIGO_CONCESION_UP1]': form.reinpo_exportador.data,
                '[NOMBRE_CONCESION_UP1]': form.concesion_minera_productor.data,
                '[UBICACION_CONCESION_UP1]': form.direccion_concesion_productor.data,
                '[PESO_BARRA_PRODUCTOR_UP2]': str(form.peso_bruto_productor.data),
            }
        else:
            replacements = {
                '[RAZON_SOCIAL_EXPORTADOR_DJCC]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_DJCC]': form.ruc_exportador.data,
                '[OBJETO_SOCIAL_DJCC]': form.objeto_social_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_DJCC1]': form.representante_legal_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_DJCC2]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_DJCC]': form.dni_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_DJCC]': form.domicilio_fiscal_exportador.data,
                '[TELEFONO_EXPORTADOR_DJCC]': form.telefono_exportador.data,
                '[ORIGEN_DE_LOS_FONDOS_EXPORTADOR_DJCC]': form.origen_de_los_fondos_exportador.data,
                '[FACTURA_PRODUCTOR_DJCC]': form.factura_productor.data,
                '[FECHA_FACTURA_PRODUCTOR_DJCC1]': form.fecha_factura_productor.data.strftime('%d/%m/%Y') if form.fecha_factura_productor.data else '',
                '[FACTURA_PRODUCTOR_RCP1]': form.factura_productor.data,
                '[RUC_PRODUCTOR_RCP1]': form.ruc_productor.data,
                '[RAZON_SOCIAL_PRODUCTOR_RCP]': form.razon_social_productor.data,
                '[VALOR_FOB_PRODUCTOR_RCP12]': str(form.valor_fob_productor.data),
                '[VALOR_FOB_PRODUCTOR_RCP2]': str(form.valor_fob_productor.data),
                '[GUIA_AEREA_EXPORTADOR_RCP1]': form.guia_aerea_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_RCP1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[REPRESENTANTE_LEGAL_EXPORTADOR_DJOM1]': form.representante_legal_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_DJOM1]': form.domicilio_fiscal_exportador.data,
                '[DNI_EXPORTADOR_DJOM1]': form.dni_exportador.data,
                '[CARGO_EXPORTADOR_DJOM]': form.cargo_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_DJOM1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_DJOM1]': form.ruc_exportador.data,
                '[REINFO_EXPORTADOR_DJOM]': form.reinpo_exportador.data,
                '[MINING_CODE_EXPORTADOR_DJOM1]': getattr(form, 'mining_code_exportador', None).data if hasattr(form, 'mining_code_exportador') else '',
                '[CIUDAD_EXPORTADOR_DJOM1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_DJOM1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[INVOICE_ORIGEN_EXPORTADOR_EEA1]': form.invoice_origen_exportador.data,
                '[GUIA_AEREA_EXPORTADOR_EEA1]': form.guia_aerea_exportador.data,
                '[DESTINO_EXPORTADOR_EEA1]': form.destino_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_DJT1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_DJT1]': form.dni_exportador.data,
                '[CARGO_EXPORTADOR_DJT1]': form.cargo_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_DJT1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_DJT1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_DJT1]': form.domicilio_fiscal_exportador.data,
                '[FACTURA_PRODUCTOR_DJT1]': form.factura_productor.data,
                '[FECHA_FACTURA_PRODUCTOR_DJT]': form.fecha_factura_productor.data.strftime('%d/%m/%Y') if form.fecha_factura_productor.data else '',
                '[RAZON_SOCIAL_TRANSPORTE_DJT1]': form.razon_social_transporte.data,
                '[PLACA_TRANSPORTE_DJT1]': form.placa_transporte.data,
                '[GUIA_DE_REMISIÓN_EXPORTADOR_DJT1]': form.guia_de_remision_exportador.data,
                '[FECHA_REGISTRO_PRODUCTOR_DJT]': form.fecha_registro_productor.data.strftime('%d/%m/%Y') if form.fecha_registro_productor.data else '',
                '[CIUDAD_EXPORTADOR_DJT1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_DJT1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[REPRESENTANTE_LEGAL_EXPORTADOR_RL1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_RL1]': form.dni_exportador.data,
                '[CARGO_EXPORTADOR_RL]': form.cargo_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_RL1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_RL1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_RL1]': form.domicilio_fiscal_exportador.data,
                '[GUIA_AEREA_EXPORTADOR_RL1]': form.guia_aerea_exportador.data,
                '[FACTURA_PRODUCTOR_RL1]': form.factura_productor.data,
                '[RAZON_SOCIAL_EXPORTADOR_RL2]': form.razon_social_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_RL3]': form.razon_social_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_RL4]': form.razon_social_exportador.data,
                '[CIUDAD_EXPORTADOR_RL1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_RL1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[RAZON_SOCIAL_EXPORTADOR_UI1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_UI1]': form.ruc_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_UI1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_UI1]': form.dni_exportador.data,
                '[CIUDAD_EXPORTADOR_UI1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_UI1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[GUIA_AEREA_EXPORTADOR_AC1]': form.guia_aerea_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_AC1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_AC1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_AC1]': form.domicilio_fiscal_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_AC1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_AC1]': form.dni_exportador.data,
                '[CIUDAD_EXPORTADOR_AC1]': form.ciudad_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_AC2]': form.razon_social_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_AC2]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[CIUDAD_EXPORTADOR_AC2]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_AC1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[GUIA_AEREA_EXPORTADOR_CO1]': form.guia_aerea_exportador.data,
                '[DORE_CO1]': form.dore_exportador.data,
                '[PESO_NETO_KG_EXPORTADOR_CO1]': str(form.peso_kg_exportador.data),
                '[DESTINO_CO1]': form.destino_exportador.data,
                '[FACTURA_PRODUCTOR_CO1]': form.invoice_origen_exportador.data,
                '[AEROLINEA_EXPORTADOR_CO1]': form.aerolinea_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_CO1]': form.razon_social_exportador.data,
                '[RAZON_SOCIAL_EXPORTADOR_CO2]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_CO1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_CO1]': form.domicilio_fiscal_exportador.data,
                '[MINING_CODE_EXPORTADOR_CO1]': getattr(form, 'mining_code_exportador', None).data if hasattr(form, 'mining_code_exportador') else '',
                '[RAZON_SOCIAL_EXPORTADOR_SCO1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_SCO1]': form.ruc_exportador.data,
                '[DOMICILIO_FISCAL_EXPORTADOR_SCO1]': form.domicilio_fiscal_exportador.data,
                '[CARGO_EXPORTADOR_SCO1]': form.cargo_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_SCO1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_SCO1]': form.dni_exportador.data,
                '[RAZON_SOCIAL_TRANSPORTE_SCO1]': form.razon_social_transporte.data,
                '[DOMICILIO_FISCAL_TRANSPORTE_SCO1]': form.domicilio_fiscal_transporte.data,
                '[RAZON_SOCIAL_TRANSPORTE_SCO2]': form.razon_social_transporte.data,
                '[RAZON_SOCIAL_EXPORTADOR_SCO3]': form.razon_social_exportador.data,
                '[RAZON_SOCIAL_TRANSPORTE_SCO3]': form.razon_social_transporte.data,
                '[CIUDAD_EXPORTADOR_SCO1]': form.ciudad_exportador.data,
                '[FECHAREGISTRO_EXPORTADOR_SCO1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[FECHAREGISTRO_EXPORTADOR_UP1]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
                '[RAZON_SOCIAL_EXPORTADOR_UP1]': form.razon_social_exportador.data,
                '[RUC_EXPORTADOR_UP1]': form.ruc_exportador.data,
                '[REPRESENTANTE_LEGAL_EXPORTADOR_UP1]': form.representante_legal_exportador.data,
                '[DNI_EXPORTADOR_UP1]': form.dni_exportador.data,
                '[GUIA_REMISION_EXPORTADOR_UP2]': form.guia_de_remision_exportador.data,
                '[RAZON_SOCIAL_PRODUCTOR_UP1]': form.razon_social_productor.data,
                '[RUC_PRODUCTOR_UP1]': form.ruc_productor.data,
                '[GUIA_REMISION_PRODUCTOR_UP1]': form.guia_remision_productor.data,
                '[FACTURA_PRODUCTOR_UP1]': form.factura_productor.data,
                '[PESO_BARRA_PRODUCTOR_UP1]': str(form.peso_bruto_productor.data),
                '[CODIGO_CONCESION_UP1]': form.reinpo_exportador.data,
                '[NOMBRE_CONCESION_UP1]': form.concesion_minera_productor.data,
                '[UBICACION_CONCESION_UP1]': form.direccion_concesion_productor.data,
                '[PESO_BARRA_PRODUCTOR_UP2]': str(form.peso_bruto_productor.data),
            }
        
        app.logger.info("Replacements dictionary created")

        # Replace bookmarks in the document
        app.logger.info("Starting bookmark replacement")
        for bookmark, value in replacements.items():
            # Remove brackets from bookmark name for Word bookmarks
            bookmark_name = bookmark.strip('[]')
            replace_bookmark_text(doc, bookmark_name, str(value) if value is not None else '')
            app.logger.info(f"Replaced bookmark '{bookmark_name}' with value: {value}")

        app.logger.info("Document generation completed")
        return doc
    except Exception as e:
        app.logger.error(f"Error in generar_documento: {str(e)}")
        raise

def replace_text(doc, replacements):
    for paragraph in doc.paragraphs:
        for run in paragraph.runs:
            for key, value in replacements.items():
                if key in run.text:
                    run.text = run.text.replace(key, str(value))

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        for key, value in replacements.items():
                            if key in run.text:
                                run.text = run.text.replace(key, str(value))

def replace_text_in_textboxes(doc, replacements):
    app.logger.info("Replacing text in textboxes")
    for shape in doc.inline_shapes:
        if shape.type == 5:  # TextBox
            app.logger.info(f"Found a textbox shape")
            try:
                txbox = shape._inline.graphic.graphicData.get_or_add_txbx_txbx()
                for paragraph in txbox.p_lst:
                    for run in paragraph.r_lst:
                        text_element = run.get_or_add_t()
                        original_text = text_element.text
                        app.logger.info(f"Original text in textbox: '{original_text}'")
                        for key, value in replacements.items():
                            if key in original_text:
                                text_element.text = original_text.replace(key, str(value))
                                app.logger.info(f"Replaced '{key}' with '{value}' in textbox")
                                app.logger.info(f"New text: '{text_element.text}'")
            except Exception as e:
                app.logger.error(f"Error processing textbox: {str(e)}")

    # Check for textboxes in floating shapes
    for shape in doc.part.inline_shapes:
        if isinstance(shape._inline.graphic.graphicData.xml, CT_Picture):
            txbox = shape._inline.graphic.graphicData.pic.nvPicPr.cNvPr.txBox
            if txbox is not None:
                app.logger.info(f"Found a floating textbox")
                try:
                    for paragraph in txbox.p_lst:
                        for run in paragraph.r_lst:
                            text_element = run.get_or_add_t()
                            original_text = text_element.text
                            app.logger.info(f"Original text in floating textbox: '{original_text}'")
                            for key, value in replacements.items():
                                if key in original_text:
                                    text_element.text = original_text.replace(key, str(value))
                                    app.logger.info(f"Replaced '{key}' with '{value}' in floating textbox")
                                    app.logger.info(f"New text: '{text_element.text}'")
                except Exception as e:
                    app.logger.error(f"Error processing floating textbox: {str(e)}")

def replace_bookmark_text(doc, bookmark_name, new_text):
    try:
        bookmarks_list = doc.element.findall('.//' + qn('w:bookmarkStart'))
        bookmarks = [bookmark for bookmark in bookmarks_list if bookmark.get(qn('w:name')) == bookmark_name]
        
        app.logger.info(f"Replacing bookmark '{bookmark_name}' with '{new_text}'")
        app.logger.info(f"Number of bookmarks found: {len(bookmarks)}")
        
        if not bookmarks:
            app.logger.warning(f"Bookmark '{bookmark_name}' not found")
            return

        bookmark = bookmarks[0]
        parent = bookmark.getparent()
        
        # Find the corresponding bookmarkEnd
        bookmark_end_list = doc.element.findall('.//' + qn('w:bookmarkEnd'))
        bookmark_end = [end for end in bookmark_end_list if end.get(qn('w:id')) == bookmark.get(qn('w:id'))]
        
        if not bookmark_end:
            app.logger.warning(f"BookmarkEnd for '{bookmark_name}' not found")
            return
        
        bookmark_end = bookmark_end[0]
        
        # Get all elements between bookmarkStart and bookmarkEnd
        elements = []
        for elem in parent.iter():
            if elem == bookmark:
                elements.append(elem)
            elif elements:
                elements.append(elem)
                if elem == bookmark_end:
                    break
        
        app.logger.info(f"Number of elements found between bookmark start and end: {len(elements)}")
        
        # Remove existing text within the bookmark
        for elem in elements:
            if elem.tag == qn('w:t'):
                app.logger.info(f"Clearing text from element: {elem.text}")
                elem.text = ''
        
        # Insert new text while preserving formatting
        first_run = None
        for elem in elements:
            if elem.tag == qn('w:r'):
                first_run = elem
                break
        
        if first_run is not None:
            app.logger.info("Found first run element, inserting new text")
            new_text_element = OxmlElement('w:t')
            new_text_element.text = new_text
            first_run.append(new_text_element)
            app.logger.info(f"Successfully replaced bookmark '{bookmark_name}' with '{new_text}'")
        else:
            app.logger.warning(f"No run element found for bookmark '{bookmark_name}'")
        
    except Exception as e:
        app.logger.error(f"Error replacing bookmark '{bookmark_name}': {str(e)}")

def replace_content_control_text(doc, tag, new_text):
    for element in doc.element.body.iter():
        if element.tag.endswith('sdt'):
            alias = element.find('.//w:alias', namespaces={'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'})
            if alias is not None and alias.get(qn('w:val')) == tag:
                text_element = element.find('.//w:t', namespaces={'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'})
                if text_element is not None:
                    text_element.text = new_text
                    app.logger.info(f"Replaced content control '{tag}' with '{new_text}'")
                    return
    app.logger.warning(f"Content control '{tag}' not found")

def analyze_document_structure(doc):
    app.logger.info("Analyzing document structure")
    part = doc.part
    for rel in part.rels.values():
        app.logger.info(f"Relationship type: {rel.reltype}")
        if rel.reltype == RT.IMAGE:
            try:
                app.logger.info(f"Relationship {rel.rId} blob type: {type(rel.target_part.blob)}")
                app.logger.info(f"Relationship {rel.rId} blob content (first 100 chars): {rel.target_part.blob[:100]}")
                root = ET.fromstring(rel.target_part.blob)
                app.logger.info(f"XML structure for relationship {rel.rId}:")
                app.logger.info(ET.tostring(root, encoding='unicode', method='xml'))
            except ET.ParseError as e:
                app.logger.error(f"Could not parse XML for relationship {rel.rId}: {str(e)}")
            except Exception as e:
                app.logger.error(f"Unexpected error analyzing relationship {rel.rId}: {str(e)}")

def analyze_relationship_content(doc):
    app.logger.info("Analyzing relationship content")
    part = doc.part
    for rel_id, rel in part.rels.items():
        app.logger.info(f"Relationship ID: {rel_id}, Type: {rel.reltype}")
        if rel.is_external:
            app.logger.info(f"External relationship: {rel.target_ref}")
        elif hasattr(rel.target_part, 'blob'):
            blob = rel.target_part.blob
            app.logger.info(f"Blob size: {len(blob)} bytes")
            app.logger.info(f"Blob type: {type(blob)}")
            app.logger.info(f"First 20 bytes: {blob[:20].hex()}")

class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    submit = SubmitField('Log In')

@app.route('/login', methods=['GET', 'POST'])
def login():
    app.logger.info(f"Login route accessed. Method: {request.method}")
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    form = LoginForm()
    if form.validate_on_submit():
        username = form.username.data
        password = form.password.data
        user = users.get(username)
        if user and check_password_hash(user['password'], password):
            user_obj = User(username)
            login_user(user_obj)
            app.logger.info(f"User {username} logged in successfully")
            next_page = request.args.get('next')
            if not next_page or urlparse(next_page).netloc != '':
                next_page = url_for('index')
            return redirect(next_page)
        else:
            flash('Invalid username or password', 'error')
    return render_template('login.html', form=form)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/api/company_profile/<ruc>', methods=['GET'])
def get_company_profile(ruc):
    try:
        response = supabase.table('company_profiles').select('*').eq('ruc', ruc).execute()
        if response.data:
            return jsonify(response.data[0]), 200
        return jsonify({'error': 'Company not found'}), 404
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/test-supabase')
def test_supabase():
    try:
        response = supabase.table('company_profiles').select('*').limit(1).execute()
        return jsonify(response.data), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    print(f"Flask app running on http://{app.config['SERVER_NAME'] or 'localhost'}:{app.config['PORT'] if 'PORT' in app.config else 5000}")
    app.run(debug=True)


