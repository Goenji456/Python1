import os
import io
from datetime import date, datetime
import logging
import mimetypes
from flask_cors import CORS
from docx.oxml.shape import CT_Picture
from docx.oxml.shared import qn
import xml.etree.ElementTree as ET
from docx import Document
from docx.opc.constants import RELATIONSHIP_TYPE as RT

from io import BytesIO
import traceback
from docx.shape import InlineShape
from docx.oxml.ns import nsdecls
from docx.oxml import parse_xml, OxmlElement
from flask_wtf import FlaskForm
from wtforms import StringField, DateField, DecimalField, SelectField, SubmitField
from wtforms.validators import Optional
from flask import Flask, render_template, request, send_file, jsonify, send_from_directory


# Get the directory of the current file (app.py)
basedir = os.path.abspath(os.path.dirname(__file__))

app = Flask(__name__, static_folder='static', static_url_path='/static')
app.config['SECRET_KEY'] = 'your_secret_key_here'
app.config['TEMPLATE_PATH'] = os.path.join(basedir, 'documents', 'plantilla.docx')
logging.basicConfig(level=logging.DEBUG)

mimetypes.add_type('application/vnd.openxmlformats-officedocument.wordprocessingml.document', '.docx')

CORS(app)

def check_write_permissions(path):
    if os.access(path, os.W_OK):
        app.logger.info(f"Write permissions OK for {path}")
    else:
        app.logger.error(f"No write permissions for {path}")

class FormularioEnvio(FlaskForm):
    # Exportador fields
    ruc_exportador = StringField('RUC', validators=[Optional()])
    razon_social_exportador = StringField('Razón Social', validators=[Optional()])
    domicilio_fiscal_exportador = StringField('Domicilio Fiscal', validators=[Optional()])
    locales_anexos_exportador = StringField('Locales Anexos', validators=[Optional()])
    objeto_social_exportador = StringField('Objeto Social', validators=[Optional()])
    representante_legal_exportador = StringField('Representante Legal', validators=[Optional()])
    dni_exportador = StringField('DNI', validators=[Optional()])
    cargo_exportador = StringField('Cargo', validators=[Optional()])
    telefono_exportador = StringField('Teléfono', validators=[Optional()])
    origen_de_los_fondos_exportador = StringField('Origen de los Fondos', validators=[Optional()])
    consignee_importador_exportador = StringField('Consignee/Importador', validators=[Optional()])
    domicilio_fiscal_consignee_exportador = StringField('Domicilio Fiscal Consignee', validators=[Optional()])
    telefono_consignee_exportador = StringField('Teléfono Consignee', validators=[Optional()])
    email_consignee_exportador = StringField('Email Consignee', validators=[Optional()])
    attn_consignee_exportador = StringField('Attn Consignee', validators=[Optional()])
    notify1_exportador = StringField('Notify1', validators=[Optional()])
    ruc_notify_exportador = StringField('RUC Notify', validators=[Optional()])
    domicilio_fiscal_notify_exportador = StringField('Domicilio Fiscal Notify', validators=[Optional()])
    notify2_exportador = StringField('Notify 2', validators=[Optional()])
    ruc_notify2_exportador = StringField('RUC Notify 2', validators=[Optional()])
    domicilio_fiscal_notify2_exportador = StringField('Domicilio Fiscal Notify 2', validators=[Optional()])
    cliente_empresa_exportador = StringField('Cliente Empresa', validators=[Optional()])
    destino_exportador = StringField('DESTINO', validators=[Optional()])
    peso_kg_exportador = DecimalField('Peso KG', validators=[Optional()])
    fecha_de_ingreso_exportador = DateField('Fecha de Ingreso', format='%Y-%m-%d', validators=[Optional()])
    fecha_de_embarque_exportador = DateField('Fecha de Embarque', format='%Y-%m-%d', validators=[Optional()])
    awb_part1 = StringField('Guía Aérea Parte 1', validators=[Optional()])
    awb_part2 = StringField('Guía Aérea Parte 2', validators=[Optional()])
    awb_part3 = StringField('Guía Aérea Parte 3', validators=[Optional()])
    guia_aerea_exportador = StringField('Guía Aérea', validators=[Optional()])  # This will store the combined value
    aerolinea_exportador = SelectField('Aerolínea', choices=[
        ('KLM CARGO', 'KLM CARGO'),
        ('SOCIETE AIR FRANCE', 'SOCIETE AIR FRANCE')
    ], validators=[Optional()])
    invoice_origen_exportador = StringField('Invoice Origen', validators=[Optional()])
    mining_code_exportador = StringField('Mining Code', validators=[Optional()])
    guia_de_remision_exportador = StringField('Guía de Remisión', validators=[Optional()])
    reinpo_exportador = StringField('REINPO', validators=[Optional()])
    ciudad_exportador = StringField('Ciudad', validators=[Optional()])
    fecharegistro_exportador = DateField('Fecha Registro', format='%Y-%m-%d', validators=[Optional()])

    # Productor fields
    ruc_productor = StringField('RUC', validators=[Optional()])
    razon_social_productor = StringField('Razón Social', validators=[Optional()])
    domicilio_fiscal_productor = StringField('Domicilio Fiscal', validators=[Optional()])
    dni_productor = StringField('DNI', validators=[Optional()])
    departamento_productor = StringField('Departamento', validators=[Optional()])
    factura_productor = StringField('Factura N°', validators=[Optional()])
    fecha_factura_productor = DateField('Fecha Factura', format='%Y-%m-%d', validators=[Optional()])
    valor_fob_productor = DecimalField('Valor FOB', validators=[Optional()])
    peso_neto_productor = DecimalField('Peso Neto', validators=[Optional()])
    peso_fino_productor = DecimalField('Peso Fino', validators=[Optional()])
    tipo_producto_productor = StringField('Tipo de Producto', validators=[Optional()])
    barra_de_oro_dore_productor = StringField('Barra de Oro Doré', validators=[Optional()])
    peso_no_oro_productor = DecimalField('Peso No Oro', validators=[Optional()])
    guia_remision_productor = StringField('Guía de Remisión', validators=[Optional()])
    recpo_n_productor = StringField('RECPO N°', validators=[Optional()])
    concesion_minera_productor = StringField('Concesión Minera', validators=[Optional()])
    codigo_ingemmet_n_productor = StringField('Código INGEMMET N°', validators=[Optional()])
    fecha_registro_productor = DateField('Fecha Registro', format='%Y-%m-%d', validators=[Optional()])
    fecha_guia_remision_productor = DateField('Fecha Guía Remisión', format='%Y-%m-%d', validators=[Optional()])

    # Transporte fields
    ruc_transporte = StringField('RUC Transporte', validators=[Optional()])
    razon_social_transporte = StringField('Razón Social Transporte', validators=[Optional()])
    domicilio_fiscal_transporte = StringField('Domicilio Fiscal Transporte', validators=[Optional()])
    vehiculo_transporte = StringField('Vehículo Transporte', validators=[Optional()])
    marca_transporte = StringField('Marca Transporte', validators=[Optional()])
    placa_transporte = StringField('Placa Transporte', validators=[Optional()])
    guia_remision_transporte = StringField('Guía de Remisión Transportista', validators=[Optional()])

    # Guía Aérea specific fields
    guia_awb_i = StringField('AWB I', validators=[Optional()])
    guia_awb_ii = StringField('AWB II', validators=[Optional()])
    guia_awb = StringField('AWB', validators=[Optional()])
    guia_ruc_exportador = StringField('RUC', validators=[Optional()])
    guia_razon_social_exportador = StringField('Razón Social Exportador', validators=[Optional()])
    guia_domicilio_fiscal_exportador = StringField('Domicilio Fiscal Exportador', validators=[Optional()])
    guia_cpostal = StringField('Código Postal', validators=[Optional()])
    guia_telefono_exportador = StringField('Teléfono Exportador', validators=[Optional()])
    guia_consignee_importador_exportador = StringField('Consignee/Importador', validators=[Optional()])
    guia_domicilio_fiscal_consignee_exportador = StringField('Domicilio Fiscal Consignee', validators=[Optional()])
    guia_int = StringField('INT', validators=[Optional()])
    guia_notify1_exportador = StringField('Notify 1', validators=[Optional()])
    guia_notify2_exportador = StringField('Notify 2', validators=[Optional()])
    guia_aerolinea_rs = StringField('Aerolínea Razón Social', validators=[Optional()])
    guia_ruc = StringField('RUC Aerolínea', validators=[Optional()])
    guia_destino_exportador = StringField('Destino', validators=[Optional()])
    guia_ciudad = StringField('Ciudad', validators=[Optional()])
    guia_aerolinea_exportador = SelectField('Aerolínea', choices=[
        ('KLM CARGO', 'KLM CARGO'),
        ('SOCIETE AIR FRANCE', 'SOCIETE AIR FRANCE')
    ], validators=[Optional()])
    guia_flight_i = StringField('Flight I', validators=[Optional()])
    guia_flight_ii = StringField('Flight II', validators=[Optional()])
    guia_aeropuerto_destino = StringField('Aeropuerto de Destino', validators=[Optional()])
    guia_dia = StringField('Día', validators=[Optional()])
    guia_peso_kg_exportador = DecimalField('Peso KG', validators=[Optional()])
    guia_fecha = StringField('Fecha', validators=[Optional()])
    guia_dore = StringField('DORE', validators=[Optional()])
    guia_month = StringField('Mes', validators=[Optional()])

    submit = SubmitField('Enviar')

@app.route('/', methods=['GET', 'POST'])
def index():
    form = FormularioEnvio()
    if form.validate_on_submit():
        try:
            app.logger.info("Form validated on submit")
            doc = generar_documento(form)
            
            output_dir = os.path.join(basedir, 'output')
            app.logger.info(f"Output directory: {output_dir}")
            if not os.path.exists(output_dir):
                os.makedirs(output_dir)
                app.logger.info(f"Created output directory: {output_dir}")
            
            check_write_permissions(output_dir)
            
            output_path = os.path.join(output_dir, 'instruccion_de_envio.docx')
            app.logger.info(f"Saving document to: {output_path}")
            doc.save(output_path)
            app.logger.info(f"Document saved successfully to {output_path}")
            
            return send_file(
                output_path,
                as_attachment=True,
                download_name='instruccion_de_envio.docx',
                mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
            )
        except Exception as e:
            app.logger.error(f"Error in index route: {str(e)}")
            return f"An error occurred: {str(e)}", 500
    
    return render_template('index.html', form=form)

@app.errorhandler(500)
def internal_server_error(e):
    return "Internal Server Error: " + str(e), 500

@app.errorhandler(Exception)
def handle_exception(e):
    app.logger.error(f"Unhandled exception: {str(e)}")
    return "An unexpected error occurred", 500

def generar_documento(form):
    try:
        app.logger.info(f"Template path: {app.config['TEMPLATE_PATH']}")
        doc = Document(app.config['TEMPLATE_PATH'])
        app.logger.info("Document loaded from template")
        
        # Combine the three parts of AWB
        combined_awb = f"{form.awb_part1.data}-{form.awb_part2.data}-{form.awb_part3.data}"
        
        replacements = {
            # Exportador replacements
            '[RUC_EXPORTADOR]': form.ruc_exportador.data,
            '[RAZON_SOCIAL_EXPORTADOR]': form.razon_social_exportador.data,
            '[DOMICILIO_FISCAL_EXPORTADOR]': form.domicilio_fiscal_exportador.data,
            '[LOCALES_ANEXOS_EXPORTADOR]': form.locales_anexos_exportador.data,
            '[OBJETO_SOCIAL]': form.objeto_social_exportador.data,
            '[REPRESENTANTE_LEGAL_EXPORTADOR]': form.representante_legal_exportador.data,
            '[DNI_EXPORTADOR]': form.dni_exportador.data,
            '[CARGO_EXPORTADOR]': form.cargo_exportador.data,
            '[TELEFONO_EXPORTADOR]': form.telefono_exportador.data,
            '[ORIGEN_DE_LOS_FONDOS_EXPORTADOR]': form.origen_de_los_fondos_exportador.data,
            '[CONSIGNEE_EXPORTADOR]': form.consignee_importador_exportador.data,
            '[DOMICILIO_FISCAL_CONSIGNEE_EXPORTADOR]': form.domicilio_fiscal_consignee_exportador.data,
            '[TELEFONO_CONSIGNEE_EXPORTADOR]': form.telefono_consignee_exportador.data,
            '[EMAIL_CONSIGNEE_EXPORTADOR]': form.email_consignee_exportador.data,
            '[ATTN_CONSIGNEE_EXPORTADOR]': form.attn_consignee_exportador.data,
            '[NOTIFY_EXPORTADOR]': form.notify1_exportador.data,
            '[RUC_NOTIFY_EXPORTADOR]': form.ruc_notify_exportador.data,
            '[DOMICILIO_FISCAL_NOTIFY_EXPORTADOR]': form.domicilio_fiscal_notify_exportador.data,
            '[NOTIFY2_EXPORTADOR]': form.notify2_exportador.data,
            '[RUC_NOTIFY2_EXPORTADOR]': form.ruc_notify2_exportador.data,
            '[DOMICILIO_FISCAL_NOTIFY2_EXPORTADOR]': form.domicilio_fiscal_notify2_exportador.data,
            '[CLIENTE_EMPRESA]': form.cliente_empresa_exportador.data,
            '[DESTINO]': form.destino_exportador.data,
            '[PESO_NETO_KG_EXPORTADOR]': str(form.peso_kg_exportador.data),
            '[FECHA_DE_INGRESO_EXPORTADOR]': form.fecha_de_ingreso_exportador.data.strftime('%d/%m/%Y') if form.fecha_de_ingreso_exportador.data else '',
            '[FECHA_DE_EMBARQUE_EXPORTADOR]': form.fecha_de_embarque_exportador.data.strftime('%d/%m/%Y') if form.fecha_de_embarque_exportador.data else '',
            '[GUIA_AEREA_EXPORTADOR]': combined_awb,
            '[AEROLINEA_EXPORTADOR]': form.aerolinea_exportador.data,
            '[INVOICE_ORIGEN_EXPORTADOR]': form.invoice_origen_exportador.data,
            '[MINING_CODE_EXPORTADOR]': form.mining_code_exportador.data,
            '[GUIA_DE_REMISION_EXPORTADOR]': form.guia_de_remision_exportador.data,
            '[REINPO_EXPORTADOR]': form.reinpo_exportador.data,
            '[CIUDAD_EXPORTADOR]': form.ciudad_exportador.data,
            '[FECHAREGISTRO_EXPORTADOR]': form.fecharegistro_exportador.data.strftime('%d/%m/%Y') if form.fecharegistro_exportador.data else '',
            
            # Productor replacements
            '[RUC_PRODUCTOR]': form.ruc_productor.data,
            '[RAZON_SOCIAL_PRODUCTOR]': form.razon_social_productor.data,
            '[DOMICILIO_FISCAL_PRODUCTOR]': form.domicilio_fiscal_productor.data,
            '[DNI_PRODUCTOR]': form.dni_productor.data,
            '[DEPARTAMENTO_PRODUCTOR]': form.departamento_productor.data,
            '[FACTURA_PRODUCTOR]': form.factura_productor.data,
            '[FECHA_FACTURA_PRODUCTOR]': form.fecha_factura_productor.data.strftime('%d/%m/%Y') if form.fecha_factura_productor.data else '',
            '[VALOR_FOB_PRODUCTOR]': str(form.valor_fob_productor.data),
            '[PESO_NETO_PRODUCTOR]': str(form.peso_neto_productor.data),
            '[PESO_FINO_PRODUCTOR]': str(form.peso_fino_productor.data),
            '[TIPO_PRODUCTO_PRODUCTOR]': form.tipo_producto_productor.data,
            '[BARRA_DE_ORO_DORE_PRODUCTOR]': form.barra_de_oro_dore_productor.data,
            '[PESO_NO_ORO_PRODUCTOR]': str(form.peso_no_oro_productor.data),
            '[GUIA_REMISION_PRODUCTOR]': form.guia_remision_productor.data,
            '[RECPO_N_PRODUCTOR]': form.recpo_n_productor.data,
            '[CONCESION_MINERA_PRODUCTOR]': form.concesion_minera_productor.data,
            '[CODIGO_INGEMMET_N_PRODUCTOR]': form.codigo_ingemmet_n_productor.data,
            '[FECHA_REGISTRO_PRODUCTOR]': form.fecha_registro_productor.data.strftime('%d/%m/%Y') if form.fecha_registro_productor.data else '',
            '[FECHA_GUIA_REMISION_PRODUCTOR]': form.fecha_guia_remision_productor.data.strftime('%d/%m/%Y') if form.fecha_guia_remision_productor.data else '',
            
            # Transporte replacements
            '[RUC_TRANSPORTE]': form.ruc_transporte.data,
            '[RAZON_SOCIAL_TRANSPORTE]': form.razon_social_transporte.data,
            '[DOMICILIO_FISCAL_TRANSPORTE]': form.domicilio_fiscal_transporte.data,
            '[VEHICULO_TRANSPORTE]': form.vehiculo_transporte.data,
            '[MARCA_TRANSPORTE]': form.marca_transporte.data,
            '[PLACA_TRANSPORTE]': form.placa_transporte.data,
            '[GUIA_REMISION_TRANSPORTE]': form.guia_remision_transporte.data,
        }
        app.logger.info("Replacements dictionary created")

        # Function to replace text in paragraphs and tables
        def replace_text(obj):
            if hasattr(obj, 'paragraphs'):
                for paragraph in obj.paragraphs:
                    for key, value in replacements.items():
                        if key in paragraph.text:
                            paragraph.text = paragraph.text.replace(key, str(value))
            if hasattr(obj, 'tables'):
                for table in obj.tables:
                    for row in table.rows:
                        for cell in row.cells:
                            for key, value in replacements.items():
                                if key in cell.text:
                                    cell.text = cell.text.replace(key, str(value))
            app.logger.info(f"Replaced text in {type(obj).__name__}")

        # Replace text in the main document body
        replace_text(doc)
        app.logger.info("Replaced text in main document body")

        # Replace text in headers and footers
        for section in doc.sections:
            replace_text(section.header)
            replace_text(section.footer)
        app.logger.info("Replaced text in headers and footers")

        app.logger.info("Document generation completed")
        return doc
    except Exception as e:
        app.logger.error(f"Error in generar_documento: {str(e)}")
        raise

def replace_text(doc, replacements):
    for paragraph in doc.paragraphs:
        for run in paragraph.runs:
            for key, value in replacements.items():
                if key in run.text:
                    run.text = run.text.replace(key, str(value))

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                for paragraph in cell.paragraphs:
                    for run in paragraph.runs:
                        for key, value in replacements.items():
                            if key in run.text:
                                run.text = run.text.replace(key, str(value))

def replace_text_in_textboxes(doc, replacements):
    app.logger.info("Replacing text in textboxes")
    for shape in doc.inline_shapes:
        if shape.type == 5:  # TextBox
            app.logger.info(f"Found a textbox shape")
            try:
                txbox = shape._inline.graphic.graphicData.get_or_add_txbx_txbx()
                for paragraph in txbox.p_lst:
                    for run in paragraph.r_lst:
                        text_element = run.get_or_add_t()
                        original_text = text_element.text
                        app.logger.info(f"Original text in textbox: '{original_text}'")
                        for key, value in replacements.items():
                            if key in original_text:
                                text_element.text = original_text.replace(key, str(value))
                                app.logger.info(f"Replaced '{key}' with '{value}' in textbox")
                                app.logger.info(f"New text: '{text_element.text}'")
            except Exception as e:
                app.logger.error(f"Error processing textbox: {str(e)}")

    # Check for textboxes in floating shapes
    for shape in doc.part.inline_shapes:
        if isinstance(shape._inline.graphic.graphicData.xml, CT_Picture):
            txbox = shape._inline.graphic.graphicData.pic.nvPicPr.cNvPr.txBox
            if txbox is not None:
                app.logger.info(f"Found a floating textbox")
                try:
                    for paragraph in txbox.p_lst:
                        for run in paragraph.r_lst:
                            text_element = run.get_or_add_t()
                            original_text = text_element.text
                            app.logger.info(f"Original text in floating textbox: '{original_text}'")
                            for key, value in replacements.items():
                                if key in original_text:
                                    text_element.text = original_text.replace(key, str(value))
                                    app.logger.info(f"Replaced '{key}' with '{value}' in floating textbox")
                                    app.logger.info(f"New text: '{text_element.text}'")
                except Exception as e:
                    app.logger.error(f"Error processing floating textbox: {str(e)}")

def replace_bookmark_text(doc, bookmark_name, new_text):
    try:
        bookmarks_list = doc.element.findall('.//' + qn('w:bookmarkStart'))
        bookmarks = [bookmark for bookmark in bookmarks_list if bookmark.get(qn('w:name')) == bookmark_name]
        
        app.logger.info(f"Replacing bookmark '{bookmark_name}' with '{new_text}'")
        app.logger.info(f"Number of bookmarks found: {len(bookmarks)}")
        
        if not bookmarks:
            app.logger.warning(f"Bookmark '{bookmark_name}' not found")
            return

        bookmark = bookmarks[0]
        parent = bookmark.getparent()
        
        # Find the corresponding bookmarkEnd
        bookmark_end_list = doc.element.findall('.//' + qn('w:bookmarkEnd'))
        bookmark_end = [end for end in bookmark_end_list if end.get(qn('w:id')) == bookmark.get(qn('w:id'))]
        
        if not bookmark_end:
            app.logger.warning(f"BookmarkEnd for '{bookmark_name}' not found")
            return
        
        bookmark_end = bookmark_end[0]
        
        # Get all elements between bookmarkStart and bookmarkEnd
        elements = []
        for elem in parent.iter():
            if elem == bookmark:
                elements.append(elem)
            elif elements:
                elements.append(elem)
                if elem == bookmark_end:
                    break
        
        app.logger.info(f"Number of elements found between bookmark start and end: {len(elements)}")
        
        # Remove existing text within the bookmark
        for elem in elements:
            if elem.tag == qn('w:t'):
                app.logger.info(f"Clearing text from element: {elem.text}")
                elem.text = ''
        
        # Insert new text while preserving formatting
        first_run = None
        for elem in elements:
            if elem.tag == qn('w:r'):
                first_run = elem
                break
        
        if first_run is not None:
            app.logger.info("Found first run element, inserting new text")
            new_text_element = OxmlElement('w:t')
            new_text_element.text = new_text
            first_run.append(new_text_element)
            app.logger.info(f"Successfully replaced bookmark '{bookmark_name}' with '{new_text}'")
        else:
            app.logger.warning(f"No run element found for bookmark '{bookmark_name}'")
        
    except Exception as e:
        app.logger.error(f"Error replacing bookmark '{bookmark_name}': {str(e)}")

def replace_content_control_text(doc, tag, new_text):
    for element in doc.element.body.iter():
        if element.tag.endswith('sdt'):
            alias = element.find('.//w:alias', namespaces={'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'})
            if alias is not None and alias.get(qn('w:val')) == tag:
                text_element = element.find('.//w:t', namespaces={'w': 'http://schemas.openxmlformats.org/wordprocessingml/2006/main'})
                if text_element is not None:
                    text_element.text = new_text
                    app.logger.info(f"Replaced content control '{tag}' with '{new_text}'")
                    return
    app.logger.warning(f"Content control '{tag}' not found")

def generar_documento_guia_aerea(form):
    try:
        template_path = os.path.join(basedir, 'documents', 'guia aerea.docx')
        app.logger.info(f"Opening DOCX template file: {template_path}")
        doc = Document(template_path)
        app.logger.info("DOCX template file read successfully")

        replacements = {
            'AWB_I_1': form.guia_awb_i.data or '',
            'AWB_II_1': form.guia_awb_ii.data or '',
            'RUC_EXPORTADOR_1_1': form.guia_ruc_exportador.data or '',
            'awb_1_2': form.guia_awb.data or '',
            'RAZON_SOCIAL_EXPORTADOR_1': form.guia_razon_social_exportador.data or '',
            'DOMICILIO_FISCAL_EXPORTADOR_1': form.guia_domicilio_fiscal_exportador.data or '',
            'CPOSTAL_1': form.guia_cpostal.data or '',
            'TELEFONO_EXPORTADOR_1': form.guia_telefono_exportador.data or '',
            'CONSIGNEE_IMPORTADOR_EXPORTADOR_1': form.guia_consignee_importador_exportador.data or '',
            'DOMICILIO_FISCAL_CONSIGNEE_EXPORTADOR_1': form.guia_domicilio_fiscal_consignee_exportador.data or '',
            'INT_1': form.guia_int.data or '',
            'NOTIFY_EXPORTADOR_1': form.guia_notify1_exportador.data or '',
            'AEROLINA_RS_1': form.guia_aerolinea_rs.data or '',
            'ruc_aero_1': form.guia_ruc.data or '',
            'des_1_1': form.guia_ciudad.data or '',
            'des_1_2': form.guia_ciudad.data or '',
            'aerolinea_nombre_1': form.guia_aerolinea_exportador.data or '',
            'flightI_1': form.guia_flight_i.data or '',
            'flightII_1': form.guia_flight_ii.data or '',
            'des_aereo_1_1': form.guia_aeropuerto_destino.data or '',
            'dia_1_1': form.guia_dia.data or '',
            'dia_1_2': form.guia_dia.data or '',
            'NOTIFY_2_1': form.guia_notify2_exportador.data or '',
            'PESO_1_1': str(form.guia_peso_kg_exportador.data or ''),
            'PESO_1_2': str(form.guia_peso_kg_exportador.data or ''),
            'PESO_1_3': str(form.guia_peso_kg_exportador.data or ''),
            'DATE_1_1': form.guia_fecha.data or '',
            'awb_1_1': form.guia_awb.data or '',
            'DORE_1': form.guia_dore.data or '',
            'MONTH_1_1': form.guia_month.data or '',
            'MONTH_1_2': form.guia_month.data or '',
        }

        # Add copies 1-6
        for i in range(2, 7):
            replacements.update({
                f'AWB_I_{i}_1': form.guia_awb_i.data or '',
                f'AWB_II_{i}_1': form.guia_awb_ii.data or '',
                f'RUC_EXPORTADOR_{i}_1': form.guia_ruc_exportador.data or '',
                f'awb_{i}_1': form.guia_awb.data or '',
                f'RAZON_SOCIAL_EXPORTADOR_{i}_1': form.guia_razon_social_exportador.data or '',
                f'DOMICILIO_FISCAL_EXPORTADOR_{i}': form.guia_domicilio_fiscal_exportador.data or '',
                f'CPOSTAL_{i}': form.guia_cpostal.data or '',
                f'TELEFONO_EXPORTADOR_{i}': form.guia_telefono_exportador.data or '',
                f'CONSIGNEE_IMPORTADOR_EXPORTADOR_{i}': form.guia_consignee_importador_exportador.data or '',
                f'DOMICILIO_FISCAL_CONSIGNEE_EXPORTADOR_{i}': form.guia_domicilio_fiscal_consignee_exportador.data or '',
                f'NOTIFY_EXPORTADOR_{i}': form.guia_notify1_exportador.data or '',
                f'AEROLINA_RS_{i}': form.guia_aerolinea_rs.data or '',
                f'ruc_aero_{i}': form.guia_ruc.data or '',
                f'des_{i}_1': form.guia_ciudad.data or '',
                f'des_{i}_2': form.guia_ciudad.data or '',
                f'aerolinea_nombre_{i}': form.guia_aerolinea_exportador.data or '',
                f'des_aereo_{i}_1': form.guia_aeropuerto_destino.data or '',
                f'dia_{i}_1': form.guia_dia.data or '',
                f'dia_{i}_2': form.guia_dia.data or '',
                f'NOTIFY_2_{i}': form.guia_notify2_exportador.data or '',
                f'PESO_{i}_1': str(form.guia_peso_kg_exportador.data or ''),
                f'PESO_{i}_2': str(form.guia_peso_kg_exportador.data or ''),
                f'PESO_{i}_3': str(form.guia_peso_kg_exportador.data or ''),
                f'DATE_{i}_1': form.guia_fecha.data or '',
                f'awb_{i}_2': form.guia_awb.data or '',
                f'flightI_{i}': form.guia_flight_i.data or '',
                f'flightII_{i}': form.guia_flight_ii.data or '',
                f'DORE_{i}': form.guia_dore.data or '',
                f'INT_{i}': form.guia_int.data or '',
                f'MONTH_{i}_1': form.guia_month.data or '',
                f'MONTH_{i}_2': form.guia_month.data or '',
            })

        for bookmark, value in replacements.items():
            try:
                app.logger.info(f"Attempting to replace bookmark '{bookmark}' with value: '{value}'")
                replace_bookmark_text(doc, bookmark, str(value))
            except Exception as e:
                app.logger.error(f"Error in main loop for bookmark '{bookmark}': {str(e)}")

        app.logger.info("Saving filled DOCX document")
        output = io.BytesIO()
        doc.save(output)
        output.seek(0)
        
        app.logger.info("DOCX document generation completed successfully")
        return output

    except Exception as e:
        app.logger.error(f"Error in generar_documento_guia_aerea: {str(e)}")
        app.logger.error(traceback.format_exc())
        raise

@app.route('/generar_guia_aerea', methods=['POST'])
def generar_guia_aerea():
    form = FormularioEnvio(request.form)
    app.logger.info(f"Form data received: {request.form}")
    if form.validate():
        app.logger.info("Form validation successful")
        try:
            output = generar_documento_guia_aerea(form)
            app.logger.info("DOCX document generated successfully")
            
            return send_file(
                output,
                as_attachment=True,
                download_name='guia_aerea.docx',
                mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml/document'
            )
        except Exception as e:
            app.logger.error(f"Error generating Guía Aérea DOCX: {str(e)}")
            app.logger.error(traceback.format_exc())
            return jsonify({"error": str(e)}), 500
    else:
        app.logger.error(f"Form validation failed. Errors: {form.errors}")
        return jsonify({"error": "Form validation failed", "details": form.errors}), 400

@app.route('/api/generar-documento-envio', methods=['POST'])
def generar_documento_envio():
    data = request.json
    # Process the data and generate the document
    doc = generar_documento(data)
    
    # Save the document to a BytesIO object
    file_stream = io.BytesIO()
    doc.save(file_stream)
    file_stream.seek(0)
    size = file_stream.tell()
    file_stream.seek(0)
    app.logger.info(f"Generated file size: {size} bytes")
    
    # Return the document as a downloadable file
    return send_file(
        file_stream,
        as_attachment=True,
        download_name='documento_envio.docx',
        mimetype='application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    )

@app.route('/test-static')
def test_static():
    return send_from_directory('static', 'test.txt')

@app.route('/test-css')
def test_css():
    return send_from_directory(app.static_folder, 'styles.css')

def check_template_file():
    template_path = os.path.join(basedir, 'documents', 'guia aerea.docx')
    
    if not os.path.exists(template_path):
        app.logger.error(f"Template file does not exist: {template_path}")
        return False
    
    try:
        doc = Document(template_path)
        app.logger.info(f"Template file loaded. Paragraphs: {len(doc.paragraphs)}, Tables: {len(doc.tables)}, Shapes: {len(doc.inline_shapes)}")
        
        # Check for content in paragraphs
        for i, para in enumerate(doc.paragraphs):
            if para.text.strip():
                app.logger.info(f"Paragraph {i}: {para.text[:50]}...")  # Log first 50 chars of non-empty paragraphs
        
        # Check for placeholders
        placeholders = ['[Consignee]', '[Domicilio_Fiscal_Consignee_Exportador]', '[awb]', '[NOTIFY_2]', '[Peso]']
        for placeholder in placeholders:
            found = False
            for para in doc.paragraphs:
                if placeholder in para.text:
                    found = True
                    app.logger.info(f"Found placeholder: {placeholder}")
                    break
            if not found:
                app.logger.warning(f"Placeholder not found: {placeholder}")
        
        return True
    except Exception as e:
        app.logger.error(f"Error checking template file: {str(e)}")
        return False

def analyze_document_structure(doc):
    app.logger.info("Analyzing document structure")
    part = doc.part
    for rel in part.rels.values():
        app.logger.info(f"Relationship type: {rel.reltype}")
        if rel.reltype == RT.IMAGE:
            try:
                app.logger.info(f"Relationship {rel.rId} blob type: {type(rel.target_part.blob)}")
                app.logger.info(f"Relationship {rel.rId} blob content (first 100 chars): {rel.target_part.blob[:100]}")
                root = ET.fromstring(rel.target_part.blob)
                app.logger.info(f"XML structure for relationship {rel.rId}:")
                app.logger.info(ET.tostring(root, encoding='unicode', method='xml'))
            except ET.ParseError as e:
                app.logger.error(f"Could not parse XML for relationship {rel.rId}: {str(e)}")
            except Exception as e:
                app.logger.error(f"Unexpected error analyzing relationship {rel.rId}: {str(e)}")

def analyze_relationship_content(doc):
    app.logger.info("Analyzing relationship content")
    part = doc.part
    for rel_id, rel in part.rels.items():
        app.logger.info(f"Relationship ID: {rel_id}, Type: {rel.reltype}")
        if rel.is_external:
            app.logger.info(f"External relationship: {rel.target_ref}")
        elif hasattr(rel.target_part, 'blob'):
            blob = rel.target_part.blob
            app.logger.info(f"Blob size: {len(blob)} bytes")
            app.logger.info(f"Blob type: {type(blob)}")
            app.logger.info(f"First 20 bytes: {blob[:20].hex()}")

if __name__ == '__main__':
    print(f"Flask app running on http://{app.config['SERVER_NAME'] or 'localhost'}:{app.config['PORT'] if 'PORT' in app.config else 5000}")
    app.run(debug=True)



    
